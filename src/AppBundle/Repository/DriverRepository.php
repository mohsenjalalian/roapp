<?php

namespace AppBundle\Repository;

use AppBundle\Entity\BusinessUnit;
use AppBundle\Entity\ShipmentAssignment;
use AppBundle\Entity\Shipment;
use Doctrine\ORM\EntityRepository;

/**
 * DriverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DriverRepository extends EntityRepository
{
    // check shipment rejected by some driver or no
    /**
     * @param Shipment $shipment
     * @return array
     */
    public function filterDriverAction(Shipment $shipment)
    {
        $filterDriver = $this->getEntityManager()
            ->getRepository("AppBundle:ShipmentAssignment")
            ->findBy(
                [
                    'shipment' => $shipment->getId(),
                    'status' => ShipmentAssignment::STATUS_REJECTED,
                ]
            )
        ;
        if ($filterDriver) {
            foreach ($filterDriver as $value) {
                $banDriver[] = $value->getDriver()
                    ->getId();
            }

            return $banDriver;
        } else {
            return $banDriver = [];
        }
    }

    /**
     * @param int    $id
     * @param string $currentPassword
     * @return \AppBundle\Entity\Driver[]|array
     */
    public function validationCurrentPassword($id, $currentPassword)
    {
        $result = $this
            ->findOneBy(
                [
                    'id' => $id,
                    'password' => $currentPassword,
                ]
            )
        ;

        return $result;
    }

    /**
     * @param BusinessUnit $businessUnit
     * @param integer      $status
     * @return array       $drivers
     */
    public function businessUnitDriver(BusinessUnit $businessUnit, $status)
    {
        $drivers = $this->getEntityManager()->getRepository('AppBundle:Driver')
            ->createQueryBuilder('driver')
            ->join('driver.businessUnit', 'businessUnit')
            ->where('driver.businessUnit = :businessUnit')
            ->andWhere('driver.status = :status')
            ->setParameter('businessUnit', $businessUnit)
            ->setParameter('status', $status)
            ->getQuery()
            ->getResult();

        return $drivers;
    }
}
