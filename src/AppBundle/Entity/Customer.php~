<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
=======
>>>>>>> e8b7c77b47809cea0ca15c4538d787a2964bc563
>>>>>>> 644c85d397060c76da693f8f7aa0281ca323b699
=======
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

>>>>>>> 124b83bd9591089a7a3aa5c525b8aef454cdf4db

/**
 * Customer
 * @ORM\Entity(repositoryClass="AppBundle\Repository\CustomerRepository")
 * @UniqueEntity(fields="username", message="Username already taken")
 */
<<<<<<< HEAD
<<<<<<< HEAD
class Customer implements UserInterface
=======
<<<<<<< HEAD
class Customer implements UserInterface, \Serializable
=======
class Customer implements UserInterface
>>>>>>> e8b7c77b47809cea0ca15c4538d787a2964bc563
>>>>>>> 644c85d397060c76da693f8f7aa0281ca323b699
=======
class Customer extends Person implements \Serializable
>>>>>>> 124b83bd9591089a7a3aa5c525b8aef454cdf4db
{

<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 124b83bd9591089a7a3aa5c525b8aef454cdf4db
    /**
     * @ORM\Column(type="string", length=255, unique=true)
     * @Assert\NotBlank()
     */
    private $username;
    /**
     * @ORM\Column(name="password", type="string")
     */
    private $password;
    /**
     * @ORM\Column(name="is_active", type="boolean")
     */
    private $isActive;
    /**
     * @var string
     *
     * @ORM\Column(name="api_key", type="string", length=255, unique=true)
     */
    private $apiKey;

    public function __construct()
    {
        $this->isActive = true;
    }
>>>>>>> 644c85d397060c76da693f8f7aa0281ca323b699

    /**
     * Returns the roles granted to the user.
     *
     * <code>
     * public function getRoles()
     * {
     *     return array('ROLE_USER');
     * }
     * </code>
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     * @return array (Role|string)[] The user roles
     */
    public function getRoles()
    {
        return array('ROLE_CUSTOMER');
    }

    /**
     * Returns the password used to authenticate the user.
     *
     * This should be the encoded password. On authentication, a plain-text
     * password will be salted, encoded, and then compared to this value.
     *
     * @return string The password
     */
    public function getPassword()
    {
        return $this->password;
        // TODO: Implement getPassword() method.
    }


    /**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string|null The salt
     */
    public function getSalt()
    {
        return null;
        // TODO: Implement getSalt() method.
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */
    public function getUsername()
    {
        return $this->username;
        // TODO: Implement getUsername() method.
    }


    /**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials()
    {
        // TODO: Implement eraseCredentials() method.
    }

    /**
     * String representation of object
     * @link http://php.net/manual/en/serializable.serialize.php
     * @return string the string representation of the object or null
     * @since 5.1.0
     */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
            // see section on salt below
            // $this->salt,
        ));
        // TODO: Implement serialize() method.
    }
    /**
     * Constructs the object
     * @link http://php.net/manual/en/serializable.unserialize.php
     * @param string $serialized <p>
     * The string representation of the object.
     * </p>
     * @return void
     * @since 5.1.0
     */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->phone,
            $this->password,
            // see section on salt below
            // $this->salt
            ) = unserialize($serialized);
        // TODO: Implement unserialize() method.
    }

    /**
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 124b83bd9591089a7a3aa5c525b8aef454cdf4db
     * Set apiKey
     *
     * @param string $apiKey
     *
     * @return Customer
     */
    public function setApiKey($apiKey)
    {
        $this->apiKey = $apiKey;
        return $this;
    }
    /**
     * Get apiKey
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->apiKey;
    }
<<<<<<< HEAD

=======
>>>>>>> 644c85d397060c76da693f8f7aa0281ca323b699
     * Returns the roles granted to the user.
     *
     * <code>
     * public function getRoles()
     * {
     *     return array('ROLE_USER');
     * }
     * </code>
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     * @return array (Role|string)[] The user roles
     */
    public function getRoles()
    {
        return array('ROLE_CUSTOMER');
    }

=======
>>>>>>> 124b83bd9591089a7a3aa5c525b8aef454cdf4db
    /**
     * Set username
     *
     * @param string $username
     *
     * @return Customer
     */
    public function setUsername($username)
    {
        $this->username = $username;
        return $this;
    }
    /**
     * Set password
     *
     * @param string $password
     *
     * @return Customer
     */
    public function setPassword($password)
    {
        $this->password = $password;
        return $this;
    }
    /**
     * Set isActive
     *
     * @param boolean $isActive
     *
     * @return Customer
     */
    public function setIsActive($isActive)
    {
        $this->isActive = $isActive;
        return $this;
    }
    /**
     * Get isActive
     *
     * @return boolean
     */
    public function getIsActive()
    {
        return $this->isActive;
    }
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> e8b7c77b47809cea0ca15c4538d787a2964bc563
>>>>>>> 644c85d397060c76da693f8f7aa0281ca323b699
=======
>>>>>>> 124b83bd9591089a7a3aa5c525b8aef454cdf4db
}
